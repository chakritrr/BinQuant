/**
 * Money Management System with Advanced STREAK Strategy
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö STREAK ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
 */

export class MoneyManagement {
  constructor(config = {}) {
    this.config = {
      // STREAK Configuration
      streakSizes: config.streakSizes || [1.0, 1.5, 2.5, 4.0, 6.5], // ‡∏Ç‡∏ô‡∏≤‡∏î order ‡πÅ‡∏ï‡πà‡∏•‡∏∞ streak
      maxStreak: config.maxStreak || 5, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      baseAmount: config.baseAmount || 1.0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      maxTotalLoss: config.maxTotalLoss || 50.0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      winMultiplier: config.winMultiplier || 1.2, // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
      lossMultiplier: config.lossMultiplier || 1.5, // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
      
      // Risk Management
      maxDailyLoss: config.maxDailyLoss || 20.0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      maxConsecutiveLosses: config.maxConsecutiveLosses || 7, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      
      // Recovery Settings
      recoveryMode: config.recoveryMode || true, // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
      recoveryMultiplier: config.recoveryMultiplier || 0.8, // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
      
      // Advanced Settings
      dynamicSizing: config.dynamicSizing || true, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
      volatilityAdjustment: config.volatilityAdjustment || true, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
      
      ...config
    };

    this.state = {
      currentStreak: 0, // index ‡πÉ‡∏ô array streakSizes
      currentOrderValue: this.config.streakSizes[0],
      totalLossAmount: 0,
      totalWinAmount: 0,
      consecutiveLosses: 0,
      consecutiveWins: 0,
      dailyLoss: 0,
      lastTradeResult: null,
      isRecoveryMode: false,
      tradeHistory: [],
      volatilityIndex: 1.0,
      lastResetDate: new Date().toDateString()
    };
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï STREAK ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
   * @param {string} tradeResult - 'WIN' ‡∏´‡∏£‡∏∑‡∏≠ 'LOSS'
   * @param {number} profitLoss - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ/‡πÄ‡∏™‡∏µ‡∏¢
   * @param {object} tradeData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   */
  updateStreak(tradeResult, profitLoss = 0, tradeData = {}) {
    const tradeRecord = {
      result: tradeResult,
      profitLoss,
      orderValue: this.state.currentOrderValue,
      streak: this.state.currentStreak,
      timestamp: new Date(),
      ...tradeData
    };

    this.state.tradeHistory.push(tradeRecord);
    this.state.lastTradeResult = tradeResult;

    if (tradeResult === 'WIN') {
      this.handleWin(profitLoss);
    } else if (tradeResult === 'LOSS') {
      this.handleLoss(profitLoss);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï daily loss
    this.updateDailyLoss(profitLoss);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï daily loss
    this.checkDailyReset();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï volatility index
    this.updateVolatilityIndex();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å state
    this.saveState();
    
    return this.getNextOrderValue();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
   */
  handleWin(profitLoss) {
    console.log(`üéâ WIN! Profit: $${profitLoss}`);
    
    this.state.totalWinAmount += profitLoss;
    this.state.consecutiveWins++;
    this.state.consecutiveLosses = 0;
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï STREAK ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
    if (this.state.currentStreak > 0) {
      console.log(`üìà Resetting streak from ${this.state.currentStreak} to 0`);
      this.state.currentStreak = 0;
      this.state.currentOrderValue = this.config.streakSizes[0];
    }
    
    // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
    if (this.state.isRecoveryMode) {
      console.log(`üîÑ Exiting recovery mode`);
      this.state.isRecoveryMode = false;
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î order ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
    if (this.config.dynamicSizing && this.state.consecutiveWins > 2) {
      const newValue = this.state.currentOrderValue * this.config.winMultiplier;
      this.state.currentOrderValue = Math.min(newValue, this.config.streakSizes[0] * 3);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
   */
  handleLoss(profitLoss) {
    const lossAmount = Math.abs(profitLoss);
    console.log(`üí∏ LOSS! Lost: $${lossAmount}`);
    
    this.state.totalLossAmount += lossAmount;
    this.state.consecutiveLosses++;
    this.state.consecutiveWins = 0;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° STREAK ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
    if (this.state.currentStreak < this.config.maxStreak - 1) {
      this.state.currentStreak++;
      this.state.currentOrderValue = this.config.streakSizes[this.state.currentStreak];
      console.log(`üìà Loss streak increased to ${this.state.currentStreak + 1}, next order: $${this.state.currentOrderValue}`);
    } else {
      console.log(`‚ö†Ô∏è Max streak reached (${this.config.maxStreak}), keeping same order size`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
    this.checkRecoveryMode();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
    this.checkStopTrading();
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
   */
  checkRecoveryMode() {
    if (this.config.recoveryMode && this.state.consecutiveLosses >= 3) {
      if (!this.state.isRecoveryMode) {
        console.log(`üîÑ Entering recovery mode`);
        this.state.isRecoveryMode = true;
      }
      
      // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î order ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
      this.state.currentOrderValue *= this.config.recoveryMultiplier;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
   */
  checkStopTrading() {
    const shouldStop = 
      this.state.totalLossAmount >= this.config.maxTotalLoss ||
      this.state.dailyLoss >= this.config.maxDailyLoss ||
      this.state.consecutiveLosses >= this.config.maxConsecutiveLosses;
    
    if (shouldStop) {
      console.log(`üö´ STOP TRADING: ${this.getStopReason()}`);
      return true;
    }
    return false;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
   */
  getStopReason() {
    if (this.state.totalLossAmount >= this.config.maxTotalLoss) {
      return `Total loss limit reached: $${this.state.totalLossAmount}`;
    }
    if (this.state.dailyLoss >= this.config.maxDailyLoss) {
      return `Daily loss limit reached: $${this.state.dailyLoss}`;
    }
    if (this.state.consecutiveLosses >= this.config.maxConsecutiveLosses) {
      return `Max consecutive losses reached: ${this.state.consecutiveLosses}`;
    }
    return 'Unknown reason';
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï daily loss
   */
  updateDailyLoss(profitLoss) {
    if (profitLoss < 0) {
      this.state.dailyLoss += Math.abs(profitLoss);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï daily loss
   */
  checkDailyReset() {
    const today = new Date().toDateString();
    if (today !== this.state.lastResetDate) {
      console.log(`üìÖ Daily reset: ${this.state.lastResetDate} -> ${today}`);
      this.state.dailyLoss = 0;
      this.state.lastResetDate = today;
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï volatility index
   */
  updateVolatilityIndex() {
    if (!this.config.volatilityAdjustment) return;
    
    const recentTrades = this.state.tradeHistory.slice(-10);
    if (recentTrades.length < 5) return;
    
    const losses = recentTrades.filter(t => t.result === 'LOSS').length;
    const winRate = (recentTrades.length - losses) / recentTrades.length;
    
    // ‡∏õ‡∏£‡∏±‡∏ö volatility index ‡∏ï‡∏≤‡∏° win rate
    if (winRate < 0.3) {
      this.state.volatilityIndex = 0.7; // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ win rate ‡∏ï‡πà‡∏≥
    } else if (winRate > 0.7) {
      this.state.volatilityIndex = 1.2; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ win rate ‡∏™‡∏π‡∏á
    } else {
      this.state.volatilityIndex = 1.0; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î order ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  getNextOrderValue() {
    let orderValue = this.state.currentOrderValue;
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
    if (this.config.volatilityAdjustment) {
      orderValue *= this.state.volatilityIndex;
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
    if (this.state.isRecoveryMode) {
      orderValue *= this.config.recoveryMultiplier;
    }
    
    return Math.max(orderValue, this.config.baseAmount * 0.1); // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10% ‡∏Ç‡∏≠‡∏á base amount
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
   */
  reset() {
    console.log('üîÑ Resetting money management system');
    this.state = {
      currentStreak: 0,
      currentOrderValue: this.config.streakSizes[0],
      totalLossAmount: 0,
      totalWinAmount: 0,
      consecutiveLosses: 0,
      consecutiveWins: 0,
      dailyLoss: 0,
      lastTradeResult: null,
      isRecoveryMode: false,
      tradeHistory: [],
      volatilityIndex: 1.0,
      lastResetDate: new Date().toDateString()
    };
    this.saveState();
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  getStats() {
    return {
      currentStreak: this.state.currentStreak,
      currentOrderValue: this.state.currentOrderValue,
      totalLossAmount: this.state.totalLossAmount,
      totalWinAmount: this.state.totalWinAmount,
      consecutiveLosses: this.state.consecutiveLosses,
      consecutiveWins: this.state.consecutiveWins,
      dailyLoss: this.state.dailyLoss,
      isRecoveryMode: this.state.isRecoveryMode,
      volatilityIndex: this.state.volatilityIndex,
      totalTrades: this.state.tradeHistory.length,
      winRate: this.calculateWinRate(),
      profitLoss: this.state.totalWinAmount - this.state.totalLossAmount
    };
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì win rate
   */
  calculateWinRate() {
    if (this.state.tradeHistory.length === 0) return 0;
    const wins = this.state.tradeHistory.filter(t => t.result === 'WIN').length;
    return (wins / this.state.tradeHistory.length) * 100;
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å state
   */
  saveState() {
    // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡∏´‡∏£‡∏∑‡∏≠ database
    try {
      localStorage.setItem('moneyManagementState', JSON.stringify(this.state));
    } catch (error) {
      console.error('Failed to save state:', error);
    }
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î state
   */
  loadState() {
    try {
      const savedState = localStorage.getItem('moneyManagementState');
      if (savedState) {
        const parsedState = JSON.parse(savedState);
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object
        if (parsedState.lastResetDate) {
          parsedState.lastResetDate = new Date(parsedState.lastResetDate).toDateString();
        }
        this.state = { ...this.state, ...parsedState };
        console.log('‚úÖ Loaded saved state');
      }
    } catch (error) {
      console.error('Failed to load state:', error);
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
   */
  getDisplayData() {
    const stats = this.getStats();
    return {
      currentOrderValue: stats.currentOrderValue.toFixed(2),
      totalLossAmount: stats.totalLossAmount.toFixed(2),
      totalWinAmount: stats.totalWinAmount.toFixed(2),
      profitLoss: stats.profitLoss.toFixed(2),
      winRate: stats.winRate.toFixed(1),
      consecutiveLosses: stats.consecutiveLosses,
      consecutiveWins: stats.consecutiveWins,
      dailyLoss: stats.dailyLoss.toFixed(2),
      isRecoveryMode: stats.isRecoveryMode,
      currentStreak: stats.currentStreak,
      volatilityIndex: stats.volatilityIndex.toFixed(2),
      totalTrades: stats.totalTrades
    };
  }
}

// Export default instance
export default new MoneyManagement(); 